Interesting Blueprints :
Game/_Game/Blueprints/ItemPickup.uasset
Game/_Game/Blueprints/PaintCan.uasset
Game/_Game/Blueprints/ScrapCreatePoint.uasset
Game/_Game/Blueprints/UpgradesMenu.uasset
Game/_Game/Blueprints/MissionSpecificBlueprints/Pages_PageCount.uasset
Game/_GAME/Blueprints/ItemDataTable.uasset
Game/_GAME/Blueprints/NPC.uasset => MissionID
Game/_GAME/Blueprints/MissionsDataTable.uasset
Game/_GAME/Blueprints/SubtitlesStruct.uasset
Game/EasySave/easySaveObject.uasset
Game/_GAME/Blueprints/GunStatsDataTable.uasset

Possibly important BP/functions (possible whitespace in function names) :
IDamageInterface_C : Damage(float DamageApplied, float SlowingMultiplier, class UActorComponent* HitComponent);
DeathScreen_C
AGhostAI_C : TeleportPlayer(); | SetStats(int32 PageCount);
ABP_NMCharacter_C
UNotification_C
APhotorealistic_Island_C
PlayerTrain : GunHook | GunHook<1..3> | Teal to Grey (paint cans)
TrainUpgradeStats
UpgradesMenu
ScrapCountTutorialMissions
MainUI

All saves can be bound at :
%LOCALAPPDATA%\Obscure\Saved\SaveGames\
    /!\ The alpha implementation will ignore the received items when the "ItemReceived" boolean is false,
    which leads to an issue if the player dies in Nightmare mode (= game reset),
    resets the game manually or by accident (crash, corrupted save, new computer, ...).
    /!\ In a further implementation, the game should look for "gameResetEvent",
    then receive the items if some "gameReset" boolean (active once the Train_Key is clicked) is true
    and if the player is connected to Archipelago,
    whatever the "itemReceived" boolean is. If no "gameReset", no item must be received :
    if "itemReceived" == false, return the callback immediately.
    /!\ TODO : Make a datastorage to send locally found items when reconnected to Archipelago

Hook code example :
    // Get the parameters in order (example)
    FString* param1 = Stack.Node()->GetPropertyByName(STR("ParamHook1"))->ContainerPtrToValuePtr<FString>(Stack.Locals());
    int64_t* param2 = Stack.Node()->GetPropertyByName(STR("ParamHook2"))->ContainerPtrToValuePtr<int64_t>(Stack.Locals());
    Output::send<LogLevel::Verbose>(STR("{}"), param1->GetCharArray());
    Output::send<LogLevel::Verbose>(STR("{}"), *param2);

Local scales of guns collisions :
FlameThrower X=0.432 Y=0.732 Z=1.50
RocketLauncher X=0.432 Y=0.712 Z=1.508
RangeGun X=0.237 Y=0.789 Z=2.684

Scenarios in Boulder fields (list of all scenarios still TODO) :
- Pick a first Pages_Drawing inside Boulder fields => Ghost appears
- Pick a first Pages_Drawing outside Boulder fields => Ghost does not appear

Global pickable items name :
- Loot boxes => ScrapCratePoint
- Scraps inside loot boxes => ItemPickup
- Scraps => ItemPickup
- Mission Items (talkable characters) => NPC<Name>

Item count :
- Scraps = 641
- Gitched scraps = 4
- Pages_Drawing = 8
[TODO : continue the list]

Secret Gear place  :
LeverBox_3 Mine2_Interior2 (X=-54399.375 Y=-98903.109 Z=8848.902)

Reproduced game features :
player_distance_interaction = 290

Miscellaneous :
If "Use Item" is called with a negative amount, the items are added to inventory instead of being removed

To get a working local world :
1) Package the <apworld>/ folder (here cccharles) and name it <apworld>.apworld (the archipelago logo should be displayed)
2) Double-click the <apworld>.apworld package to automatically install the world locally
3) Launch the Archipelago launcher and click "Generate Template Options"
4) Put the generated template from Archipelago/Players/Templates/ to Archipelago/Players/ and edit it manually
5) In the Archipelago launcher, click "Generate" to setup a game with the yaml in the Archipelago/ouput/ folder
6) The game can now be hosted with "Host" in the Archipelago launcher by using the generated game in Archipelago/output/

All Item Names :
01_KeyTony
Mine1_Key
05_Scraps
Mine1_Egg
Mine2_Egg
Mine2_Gear (unused)
Mine2_Key
Mine3_Egg
Mine3_Key
Tutorial2_Key
Boomer_Dynamite
Boomer_Rockets
Bob_BobPiece
Bob_Key
Canyon_BlueBox
Lighthouse_Breaker
Port_Journal
Pages_Drawing
Towers_Files
Junkyard_LockPicks
Junkyard_Tablet
Swamp_Fish
Pickles_Jar
Train_Key
Bridge_Dynamite
Boss_ShrineKey
